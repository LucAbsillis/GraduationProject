package main;
import java.util.Arrays;
import main.MusicKey.Tonality;
import main.MusicKey.Mode;


public class KeyCorrelation {
	// Correlations_[Base Mode]_[Final_Mode]_[tonalityDifference]
	// Base Mode and Final Mode: 0 = major; 1 = minor
	// Tonality Difference: based on integer tonality values, (the double values *2), is the difference in baseDegree*2 look at MusicKey.getSupertonic or MusicKey.getSubdominant etc
	// Many tonality differences are left out because they are irregular music theory wise, the machine learning will take care of any irregular differences that work well	
		public static final double[][][] Correlations = new double[2][2][12];
		
		static{
			Correlations[0][0][0] = 1.0;
			Correlations[0][1][0] = 0.9;
			Correlations[0][0][1] = 0.2;
			Correlations[0][0][1] = 0.25;
			Correlations[0][0][2] = 0.1;
			Correlations[0][1][2] = 0.5;
		}
		

		
		
	public double getCorrelation(MusicKey key1, Tonality Tonality_key1, MusicKey key2, Tonality Tonality_key2){
		key1.setTonality(Tonality_key1);
		key2.setTonality(Tonality_key2);
		
		Mode mode1 = key1.getMode();
		Mode mode2 = key2.getMode();
		if(mode1 == Mode.MAJOR){
			// Same Key
			if(key2.getTonality() == key1.getTonality()){
				if(mode2 == mode1){
					return Correlations[0][0][0];
				} else {
					return Correlations[0][1][0];
				}
				
			}
			// Key2 is SuperTonic
			if(key2.getTonality() == key1.getSupertonic()){
				if(mode2 == mode1){
					return Correlations[0][0][1];
				} else {
					return Correlations[0][1][1];
				}
			} 
			// Key2 is Mediant
			if(key2.getTonality() == key1.getMediant()){
				if(mode2 == mode1){
					return Correlations[0][0][2];
				} else {
					return Correlations[0][1][2];
				}
			} 
			
		} else if(mode1 == Mode.MINOR){
			
		}
		return 0;
		
	}

}
