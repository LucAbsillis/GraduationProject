package main;

import main.MusicKey.Mode;
import main.MusicKey.Tonality;

public class pitchHistogram {
	final static double[] HISTOGRAMVALUES = new double[12];
	// starts at Gsharp
	
	
	 public enum majorProfile{
		 // from rnhart.net/articles/key-finding/
		 DO(6.35),
		 DOSharp(2.23),
		 RE(3.48),
		 RESharp(2.33),
		 MI(4.38),
		 FA(4.09),
		 FASharp(2.52),
		 SO(5.19),
		 SOSharp(2.39),
		 LA(3.66),
		 LASharp(2.29),
		 TI(2.88);
		 
		 final Double MajorWeighting;
		 majorProfile(Double MajorWeighting){
			 this.MajorWeighting = MajorWeighting;
		 }
		 
	 }
	 public enum minorProfile{
		 // from rnhart.net/articles/key-finding/
		 DO(5.38),
		 DOSharp(2.60),
		 RE(3.53),
		 RESharp(2.54),
		 MI(4.75),
		 FA(3.98),
		 FASharp(2.69),
		 SO(3.34),
		 SOSharp(3.17),
		 LA(6.33),
		 LASharp(2.68),
		 TI(3.52);
		 
		 final Double MinorWeighting;
		 minorProfile(Double MinorWeighting){
			 this.MinorWeighting = MinorWeighting;
		 }
		 
		 public double KrumhanslShmuckler(
				 // note names gs = g sharp
				 double gs,
				 double a,
				 double as,
				 double b,
				 double c,
				 double cs,
				 double d,
				 double ds,
				 double e,
				 double f,
				 double fs, 
				 double g,
				 // an input tonality to determine how x and y lines up see rnhart.net/articles/key-finding
				 Tonality tonality,
				 // an input mode to test for, determines which profile is used
				 Mode mode)
		 {
			 double[][] processingArray = new double[12][2]; // processingArray consists of 12 entries of an x,y pair, processingArray[n][1] is the x value which is the pitch profile
			 if(mode == Mode.MAJOR){
				 processingArray[0][1] = majorProfile.DO.MajorWeighting;
				 processingArray[1][1] = majorProfile.DOSharp.MajorWeighting;
				 processingArray[2][1] = majorProfile.RE.MajorWeighting;
				 processingArray[3][1] = majorProfile.RESharp.MajorWeighting;
				 processingArray[4][1] = majorProfile.MI.MajorWeighting;
				 processingArray[5][1] = majorProfile.FA.MajorWeighting;
				 processingArray[6][1] = majorProfile.FASharp.MajorWeighting;
				 processingArray[7][1] = majorProfile.SO.MajorWeighting;
				 processingArray[8][1] = majorProfile.SOSharp.MajorWeighting;
				 processingArray[9][1] = majorProfile.LA.MajorWeighting;
				 processingArray[10][1] = majorProfile.LASharp.MajorWeighting;
				 processingArray[11][1] = majorProfile.TI.MajorWeighting;
			 } else {
				 // if mode == Mode.MINOR
				 processingArray[0][1] = minorProfile.DO.MinorWeighting;
				 processingArray[1][1] = minorProfile.DOSharp.MinorWeighting;
				 processingArray[2][1] = minorProfile.RE.MinorWeighting;
				 processingArray[3][1] = minorProfile.RESharp.MinorWeighting;
				 processingArray[4][1] = minorProfile.MI.MinorWeighting;
				 processingArray[5][1] = minorProfile.FA.MinorWeighting;
				 processingArray[6][1] = minorProfile.FASharp.MinorWeighting;
				 processingArray[7][1] = minorProfile.SO.MinorWeighting;
				 processingArray[8][1] = minorProfile.SOSharp.MinorWeighting;
				 processingArray[9][1] = minorProfile.LA.MinorWeighting;
				 processingArray[10][1] = minorProfile.LASharp.MinorWeighting;
				 processingArray[11][1] = minorProfile.TI.MinorWeighting;
			 }
			 switch(tonality){
			 case GSHARP:
				 for(int i = 0; i<12; i++){
					 if(i<12){
						 // this is redundant for this case but not others
						 // it is also redundant for this case but not others
						 // this comment is a redundant comment that this if statement is redundant for this case but not others
						 processingArray[i][2] = HISTOGRAMVALUES[i];
					 } else {
						 processingArray[(i-12)][2] = HISTOGRAMVALUES[(i-12)];
					 }
				 }
			 }

		return 0.0;	 
		 }
	 }
}
